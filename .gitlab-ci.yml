image: registry.gitcity.sk/gitcity-sk/gitcity-build-images:php-7.1-fpm-redis-phpunit-6.5.6

stages:
    - prepare
    - build
    - test
    - post-test
    - deploy

.run-on-do-docker: &run-on-do-docker
    tags:
        - digitalocean
        - docker
        - a

# Services configuration
.postgres-variables: &postgres-service
    variables:
        POSTGRES_PASSWORD: "5RGGjwubxdqyF6dL"
        POSTGRES_DB: homestead
    services:
        - postgres

.mysql-variables: &mysql-service
    variables:
        MYSQL_USER: homestead
        MYSQL_DATABASE: homestead
        MYSQL_PASSWORD: "5RGGjwubxdqyF6dL"
        MYSQL_ROOT_PASSWORD: "5RGGjwubxdqyF6dL"
    services:
        - mariadb

# Before scripts configuration
.before-mysql: &before-mysql
    before_script:
        - cp .env.testing.mysql .env
        - php artisan key:generate
        - php artisan config:cache
        - php artisan migrate
        - php artisan db:seed

.before-pgsql: &before-pgsql
    before_script:
        - cp .env.testing.pgsql .env
        - php artisan key:generate
        - php artisan config:cache
        - php artisan migrate
        - php artisan db:seed

# Cache configuration
.default-cache: &default-cache
    paths:
        - vendor/

.push-cache: &push-cache
    cache:
        <<: *default-cache
        key: "cake-app-with-php-7"
        policy: push

.pull-cache: &pull-cache
    cache:
        <<: *default-cache
        key: "cake-app-with-php-7"
        policy: pull

.push-cache-dev: &push-cache-dev
    cache:
        <<: *default-cache
        key: "cake-app-with-php-7-dev"
        policy: push

.pull-cache-dev: &pull-cache-dev
    cache:
        <<: *default-cache
        key: "cake-app-with-php-7-dev"
        policy: pull

# Scripts Configuration
.migrate-script: &migrate-script
    script:
        - php artisan migrate:status

.coverage-script: &coverage-script
    script:
        - phpunit --version
        - phpunit --coverage-text --colors=never

# Prepare
composer:install-dependencies:
    <<: *push-cache
    stage: prepare
    script:
        - composer self-update
        - composer -V
        - composer install --no-ansi --no-dev --no-interaction --no-progress --no-scripts --optimize-autoloader
    <<: *run-on-do-docker

composer:install-dependencies-dev:
    <<: *push-cache-dev
    <<: *postgres-service
    stage: prepare
    script:
        - cp .env.testing.pgsql .env
        - composer self-update
        - composer -V
        - composer install --no-progress
    <<: *run-on-do-docker

# tests
php:postgres-production-migrations:
    stage: test
    <<: *postgres-service
    <<: *pull-cache
    script:
        - cp .env.testing.pgsql .env
        - php artisan key:generate
        - php artisan config:cache
        - php artisan migrate
        - php artisan db:seed
    <<: *run-on-do-docker

php:mysql-production-migrations:
    stage: test
    <<: *mysql-service
    <<: *pull-cache
    script:
        - cp .env.testing.mysql .env
        - php artisan key:generate
        - php artisan config:cache
        - php artisan migrate
        - php artisan db:seed
    <<: *run-on-do-docker

php:dusk:
    stage: test
    <<: *mysql-service
    <<: *pull-cache-dev
    script:
        - cp .env.testing.mysql .env
        - php artisan key:generate
        - php artisan config:cache
        - php artisan migrate
        - php artisan db:seed
        - php artisan serve &
        - phpunit --coverage-text --colors=never ./tests/Browser
    <<: *run-on-do-docker

php:postgres-phpunit:
    stage: test
    <<: *postgres-service
    <<: *before-pgsql
    <<: *pull-cache-dev
    <<: *coverage-script
    <<: *run-on-do-docker

php:mysql-phpunit:
    stage: test
    <<: *mysql-service
    <<: *before-mysql
    <<: *pull-cache-dev
    <<: *coverage-script
    <<: *run-on-do-docker

# Post tests
php:postgres-phpcs:
    <<: *postgres-service
    <<: *before-pgsql
    <<: *pull-cache-dev
    stage: post-test
    script:
        - chmod +x vendor/bin/phpcs
        - vendor/bin/phpcs -p --extensions=php --standard=vendor/cakephp/cakephp-codesniffer/CakePHP ./app ./tests ./routes ./database
    allow_failure: true
    <<: *run-on-do-docker

# Build
build image:
    <<: *pull-cache
    image: docker:latest
    services:
        - docker:dind
    stage: build
    before_script:
        - echo "$CI_JOB_TOKEN" | docker login -u "gitlab-ci-token" "$CI_REGISTRY" --password-stdin
    script:
        - docker build --pull -t "$CI_REGISTRY_IMAGE" .
        - docker push "$CI_REGISTRY_IMAGE"
    <<: *run-on-do-docker
    only:
        - master

# Deploy
deploy:to-docker-cloud:
    image: docker:latest
    services:
        - docker:dind
    stage: deploy
    before_script:
        - echo "$CI_JOB_TOKEN" | docker login -u "gitlab-ci-token" "$CI_REGISTRY" --password-stdin
        - echo "$CLOUD_REGISTRY_SECRET" | docker login -u "maymeow" --password-stdin
    script:
        - docker pull "$CI_REGISTRY_IMAGE"
        - docker tag "$CI_REGISTRY_IMAGE" maymeow/webapp-ce:latest
        - docker push maymeow/webapp-ce:latest
    <<: *run-on-do-docker
    only:
        - master

deploy:tags-to-docker-cloud:
    <<: *pull-cache
    image: docker:latest
    services:
        - docker:dind
    stage: deploy
    before_script:
        - echo "$CI_JOB_TOKEN" | docker login -u "gitlab-ci-token" "$CI_REGISTRY" --password-stdin
        - echo "$CLOUD_REGISTRY_SECRET" | docker login -u "maymeow" --password-stdin
    script:
        - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME" .
        - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
        - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME" maymeow/webapp-ce:"$CI_COMMIT_REF_NAME"
        - docker push maymeow/webapp-ce:"$CI_COMMIT_REF_NAME"
    <<: *run-on-do-docker
    only:
        - tags
